import os
import json
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from google_sheets import add_lead
from config import BOT_TOKEN, ADMIN_ID

# --- –ó–∞–≥—Ä—É–∑–∫–∞ Google credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
creds_json = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON")
if creds_json:
    creds = json.loads(creds_json)
else:
    creds = None
    logging.warning("‚ö†Ô∏è GOOGLE_APPLICATION_CREDENTIALS_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

logging.basicConfig(level=logging.INFO)

# --- –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ ---
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
with open("scenarios.json", "r", encoding="utf-8") as f:
    SCENES = json.load(f)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}
user_lang = {}

# –§—É–Ω–∫—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def make_keyboard(options):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=o)] for o in options],
        resize_keyboard=True
    )

# /start
@dp.message(CommandStart())
async def start(message: types.Message):
    kb = make_keyboard(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¶üá≤ ’Ä’°’µ’•÷Ä’•’∂"])
    await message.answer(SCENES["welcome"]["ru"], reply_markup=kb)

@dp.message(F.text.in_(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¶üá≤ ’Ä’°’µ’•÷Ä’•’∂"]))
async def set_language(message: types.Message):
    lang = "ru" if "–†—É—Å—Å–∫–∏–π" in message.text else "hy"
    user_lang[message.from_user.id] = lang
    menu = SCENES["menu"][lang]["main"]
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:" if lang == "ru" else "‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç‚Ä§", reply_markup=make_keyboard(menu))

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞
@dp.message(F.text)
async def menu_handler(message: types.Message):
    lang = user_lang.get(message.from_user.id, "ru")
    text = message.text

    # –ö—É—Ä—Å—ã
    if "–ö—É—Ä—Å" in text or "’§’°’Ω’®’∂’©’°÷Å" in text:
        opts = SCENES["courses"][lang]["options"]
        await message.answer(SCENES["courses"][lang]["intro"], reply_markup=make_keyboard(opts))

    # –î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
    elif "–Ω–æ–≤–∏—á–∫–æ–≤" in text or "’ç’Ø’Ω’∂’°’Ø" in text:
        user_state[message.from_user.id] = "course_beginner"
        await message.answer(SCENES["courses"][lang]["beginner"], reply_markup=make_keyboard(["‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è" if lang=="ru" else "‚úÖ ‘≥÷Ä’°’∂÷Å’æ’•’¨", "üîô –ù–∞–∑–∞–¥" if lang=="ru" else "üîô ’é’•÷Ä’°’§’°’º’∂’°’¨"]))

    # –î–ª—è –∞–≥–µ–Ω—Ç–æ–≤
    elif "–∞–≥–µ–Ω—Ç–æ–≤" in text or "’£’∏÷Ä’Æ’°’Ø’°’¨" in text:
        user_state[message.from_user.id] = "course_agent"
        await message.answer(SCENES["courses"][lang]["agent"], reply_markup=make_keyboard(["‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è" if lang=="ru" else "‚úÖ ‘≥÷Ä’°’∂÷Å’æ’•’¨", "üîô –ù–∞–∑–∞–¥" if lang=="ru" else "üîô ’é’•÷Ä’°’§’°’º’∂’°’¨"]))

    # –î–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
    elif "–∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤" in text or "’∂’•÷Ä’§÷Ä’∏’≤" in text:
        user_state[message.from_user.id] = "course_investor"
        await message.answer(SCENES["courses"][lang]["investor"], reply_markup=make_keyboard(["‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è" if lang=="ru" else "‚úÖ ‘≥÷Ä’°’∂÷Å’æ’•’¨", "üîô –ù–∞–∑–∞–¥" if lang=="ru" else "üîô ’é’•÷Ä’°’§’°’º’∂’°’¨"]))

    # –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
    elif "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è" in text or "‘≥÷Ä’°’∂÷Å’æ’•’¨" in text:
        user_state[message.from_user.id] = "collect_name"
        await message.answer(SCENES["courses"][lang]["signup"])

    elif user_state.get(message.from_user.id) == "collect_name":
        user_state[message.from_user.id] = {"name": message.text}
        await message.answer("–í–∞—à –≥–æ—Ä–æ–¥:" if lang=="ru" else "’Å’•÷Ä ÷Ñ’°’≤’°÷Ñ’®:")

    elif isinstance(user_state.get(message.from_user.id), dict) and "name" in user_state[message.from_user.id] and "city" not in user_state[message.from_user.id]:
        user_state[message.from_user.id]["city"] = message.text
        await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:" if lang=="ru" else "’Å’•÷Ä ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’®:")

    elif isinstance(user_state.get(message.from_user.id), dict) and "city" in user_state[message.from_user.id] and "phone" not in user_state[message.from_user.id]:
        user_state[message.from_user.id]["phone"] = message.text
        state = user_state[message.from_user.id]
        course = "Beginner" if "course_beginner" in state.get("course", "course_beginner") else "Custom"
        add_lead(state["name"], state["city"], state["phone"], course)
        await message.answer(SCENES["courses"][lang]["thanks"])
        menu = SCENES["menu"][lang]["main"]
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:" if lang=="ru" else "‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç‚Ä§", reply_markup=make_keyboard(menu))
        user_state.pop(message.from_user.id, None)

    elif "–º–µ–Ω–µ–¥–∂–µ—Ä" in text or "’¥’•’∂’•’ª’•÷Ä" in text:
        user_state[message.from_user.id] = "contact_manager"
        await message.answer(SCENES["manager"][lang])

    elif user_state.get(message.from_user.id) == "contact_manager":
        # –ü–µ—Ä–µ—Å–ª–∞—Ç—å –∞–¥–º–∏–Ω—É
        await bot.send_message(ADMIN_ID, f"üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç @{message.from_user.username}:\n{text}")
        await message.answer(SCENES["manager"][f"thanks_{lang}"])
        user_state.pop(message.from_user.id, None)

    elif "FAQ" in text or "’∞’°÷Ä÷Å" in text:
        q_list = list(SCENES["faq"][lang]["questions"].keys())
        await message.answer(SCENES["faq"][lang]["intro"], reply_markup=make_keyboard(q_list + ["üîô –ù–∞–∑–∞–¥" if lang=="ru" else "üîô ’é’•÷Ä’°’§’°’º’∂’°’¨"]))

    elif text in SCENES["faq"][lang]["questions"]:
        await message.answer(SCENES["faq"][lang]["questions"][text])

    elif "–ù–∞–∑–∞–¥" in text or "’é’•÷Ä’°’§’°’º’∂’°’¨" in text:
        menu = SCENES["menu"][lang]["main"]
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:" if lang=="ru" else "‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç‚Ä§", reply_markup=make_keyboard(menu))

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é ‚¨ÜÔ∏è" if lang=="ru" else "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ’¥’•’∂’µ’∏÷Ç’´ ’Ø’•’ø’® ‚¨ÜÔ∏è")

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
